// Copyright (c), Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

module app::oracle_builder;

use enclave::enclave::{Self, Enclave};
use std::string::String;
use sui::event;

/// ====
/// Core onchain oracle builder logic for price feeds
/// ====

const PRICE_FEED_INTENT: u8 = 0;
const EInvalidSignature: u64 = 1;

/// Object representing a price update from the oracle
public struct PriceUpdate has key, store {
    id: UID,
    price_feed_id: String,
    oracle_id: String,
    timestamp_ms: u64,
    price: u64,
}

/// Event emitted when a new price update is created
public struct PriceUpdateEvent has copy, drop {
    price_feed_id: String,
    oracle_id: String,
    timestamp_ms: u64,
    price: u64,
}

/// Should match the inner struct T used for IntentMessage<T> in Rust.
public struct PriceFeedResponse has copy, drop {
    oracle_id: String,
    price_feed_id: String,
    price: u64,
    timestamp_ms: u64,
}

public struct ORACLE_BUILDER has drop {}

fun init(otw: ORACLE_BUILDER, ctx: &mut TxContext) {
    let cap = enclave::new_cap(otw, ctx);

    cap.create_enclave_config(
        b"oracle builder enclave".to_string(),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr0
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr1
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr2
        ctx,
    );

    transfer::public_transfer(cap, ctx.sender())
}

public fun new_price_update<T>(
    response: PriceFeedResponse,
    sig: &vector<u8>,
    enclave: &Enclave<T>,
    ctx: &mut TxContext,
): PriceUpdate {
    let res = enclave.verify_signature(
        PRICE_FEED_INTENT,
        response.timestamp_ms,
        response,
        sig,
    );
    assert!(res, EInvalidSignature);
    
    // Create the PriceUpdate object
    let price_update = PriceUpdate {
        id: object::new(ctx),
        price_feed_id: response.price_feed_id,
        oracle_id: response.oracle_id,
        timestamp_ms: response.timestamp_ms,
        price: response.price,
    };
    
    // Emit PriceUpdateEvent
    event::emit(PriceUpdateEvent {
        price_feed_id: response.price_feed_id,
        oracle_id: response.oracle_id,
        timestamp_ms: response.timestamp_ms,
        price: response.price,
    });
    
    price_update
}

#[test]
fun test_oracle_builder_flow() {
    use sui::test_scenario::{Self, ctx, next_tx};
    use sui::nitro_attestation;
    use sui::test_utils::destroy;
    use enclave::enclave::{register_enclave, create_enclave_config, update_pcrs, EnclaveConfig};

    let mut scenario = test_scenario::begin(@0x1);
    let mut clock = sui::clock::create_for_testing(scenario.ctx());
    clock.set_for_testing(1744684007462);

    let cap = enclave::new_cap(ORACLE_BUILDER {}, scenario.ctx());
    cap.create_enclave_config(
        b"oracle builder enclave".to_string(),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        scenario.ctx(),
    );

    scenario.next_tx(@0x1);

    let mut config = scenario.take_shared<EnclaveConfig<ORACLE_BUILDER>>();

    config.update_pcrs(
        &cap,
        x"cbe1afb6ed0ff89f10295af0b802247ec5670da8f886e71a4226373b032c322f4e42c9c98288e7211682b258684505a2",
        x"cbe1afb6ed0ff89f10295af0b802247ec5670da8f886e71a4226373b032c322f4e42c9c98288e7211682b258684505a2",
        x"21b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a",
    );

    scenario.next_tx(@0x1);
    let payload =
        x"8444a1013822a0591120a9696d6f64756c655f69647827692d30366534623938633635343966663830332d656e633031393633373362313935666237323366646967657374665348413338346974696d657374616d701b000001963743f8f06470637273b0005830cbe1afb6ed0ff89f10295af0b802247ec5670da8f886e71a4226373b032c322f4e42c9c98288e7211682b258684505a2015830cbe1afb6ed0ff89f10295af0b802247ec5670da8f886e71a4226373b032c322f4e42c9c98288e7211682b258684505a202583021b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a0358309af4960cd10ff0ddb81dc6660d16bf92165923d7ce3cbc53b9e42257424049b55bf459ca68ba632f39ff510064293c5f045830f3e18816e8d0ba69088d034522e742f0e1909ab34d5e83a1f579ffb43c58f0f0f35d64401efc9426097565d0506a8a5fa58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b636572746966696361746559027f3082027b30820201a00302010202100196373b195fb7230000000067fdc1ce300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30366534623938633635343966663830332e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303431353032313734375a170d3235303431353035313735305a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30366534623938633635343966663830332d656e63303139363337336231393566623732332e75732d656173742d312e6177733076301006072a8648ce3d020106052b8104002203620004490136a3059279a6f8632e540e52ed40f92f891fedf5bdfbbddc3ec066bdbe0f45e0c3e8b07e689a8c3ad57f940181b8a7d8940772290efc58e56d1a9fcc50a969e55ec546e325c09d22c9eb1ed581dd00c70e184368b2330e7ef4b94d3f3833a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d0403030368003065023100d6d67e427ae4d86ba2f9d7848aba398d89271decf60d772fb8f68a95e01aedfdfa1dc46d0e7c65d42c8328af205cfc02023037bdff62ac37852595143477c8cdf43937c4b56e7165256017c9aa6083cbe6e99365cf38c3984e2e7450d1578293f3c668636162756e646c65845902153082021130820196a003020102021100f93175681b90afe11d46ccb4e4e7f856300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3139313032383133323830355a170d3439313032383134323830355a3049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004fc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4a3423040300f0603551d130101ff040530030101ff301d0603551d0e041604149025b50dd90547e796c396fa729dcf99a9df4b96300e0603551d0f0101ff040403020186300a06082a8648ce3d0403030369003066023100a37f2f91a1c9bd5ee7b8627c1698d255038e1f0343f95b63a9628c3d39809545a11ebcbf2e3b55d8aeee71b4c3d6adf3023100a2f39b1605b27028a5dd4ba069b5016e65b4fbde8fe0061d6a53197f9cdaf5d943bc61fc2beb03cb6fee8d2302f3dff65902c2308202be30820245a003020102021100aca2293d4cf500edd86a7bd187ba1338300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3235303431313136333235355a170d3235303530313137333235355a3064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d356139363331373264336535616338622e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b810400220362000490c21b3f525af903e794663217497520278d2139f1d1a0b20eb8ff5355c8aed6ac269cea960f70493d0a4133b6cba128c820e80f40864bc032ac9b818e45c587f53d07eafc78fb530b2a1869858e55ef33c8e61e2dc6f370a308ad65d94ed1eea381d53081d230120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204301d0603551d0e0416041431b3f2a9c91d2fbfe1230f702391caeec8567e0d301f0603551d23041830168014f5273e07c37b153782a854f34bf8941eb280ef6e300a06082a8648ce3d040303036700306402300249f3400cd372979e8b38574f68abb0c09985ebba87d6ff7ed39565b5d60cf1219e5148ac25ec631730542aebd5c5810230615675a1d4841c819082db134b1717eb4b6676c812f09130b1cfe7a9f62a02a072b5c336425a14fbbd1d80d74b356b85590319308203153082029ba003020102021100969362d18653a5d07019712d46af35ca300a06082a8648ce3d0403033064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d356139363331373264336535616338622e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200048d5a8ecd047ea37a3fb8d9e94294ae4bea46c9750e50fe1689ba34e522aa77e22a873d3369e89e7e5672ced6337ae0efbfb8a31ac3bba48b522798b2b86b033adac2e253fc2f048d7c26b9bc7c3c306451a90650305504ba3bd869c9d382027ba381ea3081e730120603551d130101ff040830060101ff020101301f0603551d23041830168014add2c2173808b510358d217b3b86fb8f1ad6b173301d0603551d0e04160414f5273e07c37b153782a854f34bf8941eb280ef6e300e0603551d0f0101ff0404030201863081800603551d1f047930773075a073a071866f687474703a2f2f63726c2d75732d656173742d312d6177732d6e6974726f2d656e636c617665732e73332e75732d656173742d312e616d617a6f6e6177732e636f6d2f63726c2f66326463623035372d333434352d343963642d626131382d3733396663666466353261632e63726c300a06082a8648ce3d0403030368003065023100a446d4c6ebe8dc4ac3196b5a7488d470128a69c843db43ce55e139cd95a1f977074066d9f23e45530b6850217b57cdf402305f358040394462762ca1094b9302a4e1e51cf61dde52a048d1de90d25a239574e0f615659945b64264b997bb5a0ccb335902c2308202be30820245a003020102021500d2582b5520ba5712e796e4f758e577ee985f5954300a06082a8648ce3d040303308189313c303a06035504030c33613833653764313231306434313335632e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c65301e170d3235303431353031343333385a170d3235303431363031343333385a30818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30366534623938633635343966663830332e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200049f84fd231f0332361556d06121290b042aba0fc8119cf62b530a34fde2ba0a5213eaf4bcd79cd240492f51702315beebedc7c29d42a72912e0add5975ff35fe8ac7b9167ad19b2984114aa5c6bc466a20d63e5f2bb5d7dc4a9e7a6400545d95fa366306430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204301d0603551d0e0416041431b3f2a9c91d2fbfe1230f702391caeec8567e0d301f0603551d23041830168014f5273e07c37b153782a854f34bf8941eb280ef6e300a06082a8648ce3d040303036700306402300299d6641d327fd9b5986cbfccf00ea02d95eeb7ee6f4193fd4ba28a17a329f67ba20e551ceb3b1c739df61308799d3102302ab166a5394bb64e6e6149da899acde27417ba137083bc4b6f156cde3deea56cde0bf57186c80bd6dafdeb898aeb71566a7075626c69635f6b65795820e8e62201dbe293b703c759f653107acbc2c911fa1d2e66f2c747bec95971a2af69757365725f64617461f6656e6f6e6365f65860b8397a987eb8327f75b4ab764c74dd068cbc107faa518b5d97bc074cf4ea1e8cb5cbaa0446b54d42ac55ad9c84094cedcddaa3b74b4a3b8f681a00cf311232dd663f8e3c9c67b7926e7b9dbdf697e1358e3b380a8e76d088db535d607d96b8a1";
    let document = nitro_attestation::load_nitro_attestation(payload, &clock);
    config.register_enclave(document, scenario.ctx());

    scenario.next_tx(@0x4668aa5963dacfe3e169be3cf824395ab9de3f0a544fc2ca638858a536b5ff4b);

    let enclave = scenario.take_shared<Enclave<ORACLE_BUILDER>>();

    let sig =
        x"77b6d8be225440d00f3d6eb52e91076a8927cebfb520e58c19daf31ecf06b3798ec3d3ce9630a9eceee46d24f057794a60dd781657cb06d952269cfc5ae19500";
    let response = PriceFeedResponse {
        oracle_id: b"test_oracle".to_string(),
        price_feed_id: b"test_price_feed_id".to_string(),
        price: 10050000000,
        timestamp_ms: 1744683300000,
    };
    let price_update = new_price_update(
        response,
        &sig,
        &enclave,
        scenario.ctx(),
    );

    sui::transfer::public_share_object(price_update);
    test_scenario::return_shared(config);
    clock.destroy_for_testing();
    enclave.destroy();
    destroy(cap);
    scenario.end();
}
